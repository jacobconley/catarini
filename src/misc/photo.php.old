<?hh namespace com\marmocet\photo;

use InvalidArgumentException;
use RuntimeException;

function isImage(string $path) : bool 
{
	$path = realpath($path);
	$ext = pathinfo($path, PATHINFO_EXTENSION);
	return ($ext === "jpg" || $ext === "jpeg" || $ext === "png");
}
/**
 * Open and return an image type
 */
function ImageFromPath(string $path) : ?resource
{
	$path = realpath($path);
	$ext = pathinfo($path, PATHINFO_EXTENSION);
	if($ext === "jpg" || $ext === "jpeg")			return imagecreatefromjpeg($path);
	else if($ext === "png")							return imagecreatefrompng($path);
	else return NULL;
}

/**
 * Make a vertical scrolling composite image of all images in $Directory.
 * @param $Directory Directory path from which to read.  This should always be a literal, for security purposes
 * @param $Width
 * @param $Height
 * @return a $Width x $Height image
 * @throws IllegalArgumentException if $Directory cannot be read.
 */
function Gallery(string $Directory, int $Width, int $Height) : resource
{
	$Directory = realpath($Directory);
	$dir = @scandir($Directory);
	if($dir === FALSE) throw new InvalidArgumentException("Could not read from $Directory : ".posix_get_last_error());

	$Image = imagecreatetruecolor($Width, $Height);

	$i	= 0; // Counter
	$iy = 0; // Height index
	foreach($dir as $path)
	{
		$file = NULL;
		$ext = pathinfo($path, PATHINFO_EXTENSION);

		if($ext === "jpg" || $ext === "jpeg")			$file = imagecreatefromjpeg($Directory.'/'.$path);
		else if($ext === "png")							$file = imagecreatefrompng($Directory.'/'.$path);
		else continue;
		if($file === FALSE) throw new RuntimeException("Could not read $Directory/$path : ".posix_get_last_error());

		$fx = imagesx($file);	// File width -- mutated later
		$fy = imagesy($file);	// File height -- mutated later

		if($fx != $Width)
		{
			// Scale width
			$file	= imagescale($file, $Width);
			$fx		= $Width;
			$fy		= imagesy($file);
		}

		// Overflow 
		if($iy + $fy > $Height && $i)
		{
			// Calculate new heights for the image as a whole, then the current image.  Crop it if necessary

			$newHeight = $iy + $fy; // At first, assume new height is the max: the current index + height of the entire new image
			// Unless...

			// Sliver prevention (Limit increase in height)
			// If (gap to fill) is less than (x), crop the image to (x)
			// Here, (x) is half of the size of the (new image).
			if(($Height - $iy) < ($fy / 2))
			{
				$fy			= $fy / 2;
				$Height		= $iy + $fy;
				$file = imagecrop($file, [ 'x' => 0, 'y' => 0, 'width' => $Width, 'height' => $fy ]);
				if($file === FALSE) throw new RuntimeException("Could not crop image");
			}

			$tmp = imagecreatetruecolor($Width, $iy + $fy);
			if(!imagecopymerge($tmp, $Image, 0, 0, 0, 0,  $Width, $Height, 100)) throw new RuntimeException("Could not resize image");
			$Image = $tmp;
		}

		if(!imagecopymerge($Image, $file, 0, $iy, 0, 0, $Width, $Height - $iy, 100)) throw new RuntimeException("Could not copy image");

		$i++;
		$iy += $fy;
		if($iy >= $Height) break;
	}

	return $Image;
}