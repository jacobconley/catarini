<?hh

// - - -
// SVGs
// - - -

class :path extends :xhp:html-element
{
	children empty;
	attribute string d @required;
	attribute Stringish stroke, Stringish fill, Stringish stroke-width, Stringish style, Stringish shape-rendering;
	protected string $tagName = 'path';
}
class :circle extends :xhp:html-singleton
{
	children empty;
	attribute Stringish cx, Stringish cy, Stringish r;
	attribute Stringish stroke, Stringish fill, Stringish stroke-width, string style;
	protected string $tagName = 'circle';

	protected function stringify(): string { return $this->renderBaseAttrs().'>'; }
}

class :use extends :xhp:html-singleton
{
	children empty;
	attribute Stringish href;

	protected string $tagName = 'use';
}
class :svg extends :xhp:html-element
{
// 	children ( XHP_INLINE_USE | :circle )*;
 	category %flow, %phrase;

	attribute Stringish width, Stringish height, Stringish viewBox, string preserveAspectRatio, string transform;

	protected string $tagName = 'svg';
}

class XHP_INLINE_USE implements XHPUnsafeRenderable 
{
	private $href;
	public function __construct(string $href){ $this->href = $href; }
	public function toHTMLString()
	{
		return '<use xlink:href="'.$this->href.'" />';
	}
}

class :svg:inline extends :x:element
{
	attribute string src @required;

	attribute
		// Global HTML attributes, ripped from XHP source
		Stringish accesskey,
		Stringish class,
		enum { 'true', 'false' } contenteditable,
		Stringish contextmenu,
		Stringish dir,
		enum { 'true', 'false' } draggable,
		Stringish dropzone,
		bool hidden,
		Stringish id,
		bool inert,
		Stringish itemid,
		Stringish itemprop,
		Stringish itemref,
		Stringish itemscope,
		Stringish itemtype,
		Stringish lang,
		Stringish role,
		enum {'true', 'false'} spellcheck,
		Stringish style,
		Stringish tabindex,
		Stringish title,
		enum {'yes', 'no'} translate,

		// Javascript events
		Stringish onabort,
		Stringish onblur,
		Stringish oncancel,
		Stringish oncanplay,
		Stringish oncanplaythrough,
		Stringish onchange,
		Stringish onclick,
		Stringish onclose,
		Stringish oncontextmenu,
		Stringish oncuechange,
		Stringish ondblclick,
		Stringish ondrag,
		Stringish ondragend,
		Stringish ondragenter,
		Stringish ondragexit,
		Stringish ondragleave,
		Stringish ondragover,
		Stringish ondragstart,
		Stringish ondrop,
		Stringish ondurationchange,
		Stringish onemptied,
		Stringish onended,
		Stringish onerror,
		Stringish onfocus,
		Stringish oninput,
		Stringish oninvalid,
		Stringish onkeydown,
		Stringish onkeypress,
		Stringish onkeyup,
		Stringish onload,
		Stringish onloadeddata,
		Stringish onloadedmetadata,
		Stringish onloadstart,
		Stringish onmousedown,
		Stringish onmouseenter,
		Stringish onmouseleave,
		Stringish onmousemove,
		Stringish onmouseout,
		Stringish onmouseover,
		Stringish onmouseup,
		Stringish onmousewheel,
		Stringish onpause,
		Stringish onplay,
		Stringish onplaying,
		Stringish onprogress,
		Stringish onratechange,
		Stringish onreset,
		Stringish onresize,
		Stringish onscroll,
		Stringish onseeked,
		Stringish onseeking,
		Stringish onselect,
		Stringish onshow,
		Stringish onstalled,
		Stringish onsubmit,
		Stringish onsuspend,
		Stringish ontimeupdate,
		Stringish ontoggle,
		Stringish onvolumechange,
		Stringish onwaiting;

	protected function render() : XHPRoot
	{
		$ret = <svg>{ new XHP_INLINE_USE($this->:src) }</svg>;
		foreach($this->getAttributes() as $key => $value)
		{
			if($key == "src") continue;
			$ret->setAttribute($key, $value);
		}
		return $ret;
	}
}


// Paginator

/**
 * @attribute count-links Maximum number of links not including the two end links; default to -1 : no max
 */
class :MCT:Paginator extends :x:element
{
	attribute int 		count			@required;
	attribute string 	pagevar			= "PAGE";
	attribute int 		current 		= -1;
	attribute int 		max-out 	 	= -1;

	protected function render() : XHPRoot 
	{
		$LOCALES = Map {
			'en-us' => Map {
				'aria-label' => 'Page Selection',
				'frst' => 'First',
				'prev' => 'Previous', 
				'next' => 'Next',
				'last' => 'Last',

				'page-format' => 'Page %d',
			},
		};
		$LOCALE = $LOCALES->at(com\marmocet\ChooseLocale($LOCALES->keys()));

		if($this->:count <= 0) throw new InvalidArgumentException("Count must be a positive integer");

		$pagect 	= $this->:count;
		$maxout 	= $this->:max-out;
		$PAGE 		= $this->:pagevar;
		$qmap 		= new Map($_GET);
		if($qmap->containsKey($PAGE)) $qmap->removeKey($PAGE);
		$QUERY		= ($qmap->count() ? "&".QUERY($qmap) : "");

		$cur = $this->:current;
		if($cur == -1 && isset($_GET[$PAGE])) $cur=$_GET[$PAGE];
		if($cur < 1)					$cur = 1;
		else if($cur > $this->:count)	$cur = $this->:count;

		// End links

		$frst = 1;
		$prev = $cur -1;
		$next = $cur +1;
		$last = $this->:count;
		$Frst = <li><a aria-label={ $LOCALE['frst'] } >«</a></li>;
		$Prev = <li><a aria-label={ $LOCALE['prev'] } >‹</a></li>;
		$Next = <li><a aria-label={ $LOCALE['next'] } >›</a></li>;
		$Last = <li><a aria-label={ $LOCALE['last'] } >»</a></li>;

		$ret = <ul class="XHPPaginator" role="navigation" aria-label={ $LOCALE['aria-label'] }></ul>;

		$start = 1;
		if($cur > floor($maxout / 2))
		{
			if($cur > $pagect - floor($maxout/2))		$start = $pagect - $maxout + 1;
			else 										$start = $cur - floor($maxout / 2); 
		}


		for($i = 0; ($i < $maxout || $maxout == -1); $i++)
		{
			$el = NULL;
			$pg = $i + $start;
			if($pg > $pagect) break;

			if($maxout > 0)
			{
				if($i == 0 && $start > 1)							{ $el = $Frst; $pg = $frst; }
				if($i == 1 && $start > 1)							{ $el = $Prev; $pg = $prev; }
				if($i == $maxout - 2 && $start < ($last - $maxout + 1)) { $el = $Next; $pg = $next; }
				if($i == $maxout - 1 && $start < ($last - $maxout + 1))	{ $el = $Last; $pg = $last; }
			}

			if(! $el) $el = (<li><a>{$pg}</a></li>);
			$a = $el->getFirstChild();
			if($a === NULL) throw new RuntimeException('AAAAA');

			if($pg == $cur)
			{
				$a->setAttribute('data-active', TRUE);
				$a->setAttribute('aria-disabled', TRUE);
			}
			else
			{
				if(! $a->getAttribute('aria-label')) $a->setAttribute('aria-label', sprintf($LOCALE['page-format'], $pg));
				$a->setAttribute('data-page-number', $pg);
				$a->setAttribute('href', "?$PAGE=$pg$QUERY");
			}

			$ret->appendChild($el); 
		}

		return $ret;
	}
}

class :MCT:TabBar extends :x:element 
{
	children (:li)*;
	category %flow;

	attribute 	Stringish class,
				Stringish id;

	protected ?XHPRoot $svg;

	protected function tabExtra() : ?XHPRoot
	{
		return NULL;
	}

	protected function render() : XHPRoot 
	{
		$ret = <ul class={"XHPTabBar ".$this->:class} id={$this->:id} style="display: flex;"></ul>;

		$svg_ini = $this->svg;
		$svg_fin = $this->svg;
		if($svg_fin) $svg_ini->setAttribute('transform', 'scale(-1,1)');

		foreach($this->getChildren() as $child)
		{
			$ret->appendChild(<li style="flex: 1; list-style-type: none; position: relative">
				<div style="position: absolute; top: 0; width: 100%; height: 100%">{ $this->tabExtra() }</div>
				<div style="position: absolute; top: 0; width: 100%; height: 100%">{ $child->getChildren() }</div>
			</li>);
		}

		return $ret;
	}
}
class :MCT:TabBar:traditional extends :MCT:TabBar
{
	protected function tabExtra() : XHPRoot 
	{
		return 
		<div style="display:flex; height: 100%">
			<svg style="height: 100%" viewBox="0 0 30 50" preserveAspectRatio="xMaxYMax meet">
				<path d=" M 0 50 C 25 40 0 10 25 0 L 30 0 L 30 50 Z" style="stroke-width: 0" ></path>
				<path d=" M 0 50 C 25 40 0 10 25 0 L 30 0"></path>
			</svg>
			<svg style="height: 100%; flex: 1" viewBox="0 0 30 50" preserveAspectRatio="none">
				<path d="M 0 0 L 30 0 L 30 50 L 0 50" style="stroke-width: 0"></path>
				<path d="M 0 0 L 30 0"></path>
			</svg>
			<svg style="height: 100%" transform="scale(-1,1)" viewBox="0 0 30 50" preserveAspectRatio="xMaxYMax meet">
				<path d=" M 0 50 C 25 40 0 10 25 0 L 30 0 L 30 50 Z" style="stroke-width: 0" ></path>
				<path d=" M 0 50 C 25 40 0 10 25 0 L 30 0"></path>
			</svg>
		</div>;
	}
}

class :table:sortable extends :x:element
{
	// Taken from XHP source
	category %flow;
	children (
		:caption?,
		:colgroup*,
		:thead?,
		(
			(:tfoot, (:tbody+ | :tr*)) |
			((:tbody+ | :tr*), :tfoot?)
		)
	);

	protected function render() : XHPRoot 
	{
		$ret = <table sortable={TRUE}></table>;
		foreach($this->getChildren() as $child)
		{
			if($child instanceof :thead)
			{
				$thead_new = <thead></thead>;
				$thead_new->setAttributes($child->getAttributes());

				$thead_children = $child->getChildren();
				if($thead_children->isEmpty()) break;

				$thead_tr = $thead_children[0];
				$thead_tr_new = <tr></tr>; $thead_tr_new->setAttributes($thead_tr->getAttributes());
				foreach($thead_tr->getChildren() as $thead_td)
				{
					if($thead_td->getAttribute('data-order') != NULL)
					{
						$thead_td_new = <td>
							<svg style="height: 1.5em; margin: 0.25em;" viewBox="0 0 60 100" preserveAspectRatio="xMidYMid meet">
								<path id="AESC" d="M 0 40 L 60 40 L 30 0 M 0 60 L 60 60 L 30 100 Z"></path>
								<path id="DESC" d="M 0 40 L 60 40 L 30 0 M 0 60 L 60 60 L 30 100 Z"></path>
							</svg>
							<div style="flex: 1;">{ $thead_td->getChildren() }</div>
						</td>;
						$thead_td_new->setAttributes($thead_td->getAttributes());
						$thead_td_new->setAttribute('style', $thead_td_new->:style.'; display: flex; align-items: center; ');
						$thead_tr_new->appendChild($thead_td_new);
					}
					else $thead_tr_new->appendChild($thead_td);
				}
				$thead_new->appendChild($thead_tr_new);

				$ret->appendChild($thead_new);
				continue;
			}

			$ret->appendChild($child);
		}

		foreach($this->getAttributes() as $key => $value) $ret->setAttribute($key, $value);

		return $ret;
	}


}
